import math as math
from interactive_movement_paddles_functions import interactive_movement_paddles
from resetting_functions import *

#starting values for everything
#scores
left_score = 0
right_score = 0
    
#last hit between powerup1 and ball & powerup2 and ball
last_hit1 = 0
last_hit2 = 0
    
#counting variable to prevent first auto-reset of powerup
counter1 = 0
counter2 = 0
    
#powerups position
powerup1_x = 440
powerup1_y = 270
powerup2_x = 440
powerup2_y = 270
    
#powerups velocity
powerup1_dx = 2
powerup1_dy = 2
powerup2_dx = -2
powerup2_dy = -2
    
#paddle positions
left_y = 260
right_y = 260
leftp_x = 1000
rightp_x = 1000
leftp_y = 260
rightp_y = 260
    
#paddle height dependent of powerup2
powerup2left_height = 80
powerup2right_height = 80
    
    
#ball position
ball_x = 390
ball_y = 290
    
#ball velocity/direction
ball_dy = -2
ball_dx = -2

#fixing the keyboard issues
left_key = ""
right_key = ""

def powerup1_reset():
    global powerup1_x, powerup1_y, leftp_x, rightp_x
    powerup1_x = 390
    powerup1_y = 290
    leftp_x = -100   
    rightp_x = -100

def powerup2_reset():
    global left_y, leftp_y, right_y, rightp_y, powerup2left_height, powerup2right_height, powerup2_x, powerup2_y
    #paddle height dependent of powerup2
    powerup2left_height = 80
    powerup2right_height = 80
    if powerup2left_height == 160:
        left_y += 40        
        leftp_y += 40
        powerup2left_height = 80
    elif powerup2right_height == 160:
        right_y += 40
        rightp_y += 40
        powerup2right_height = 80
    powerup2_x = 390
    powerup2_y = 290

def ball_reset():
    global ball_x, ball_y
    #ball position 
    ball_x = 390
    ball_y = 290
    
def continous_movement_paddles():
    #moving paddles
    #move left paddles
    if left_key == "w":
        left_y += -2
        leftp_y += 2
    if left_key == "s":
        left_y += 2  
        leftp_y += -2
    #move right paddles
    if right_key == "i":
        right_y += -2
        rightp_y += 2
    if right_key == "k":
        right_y += 2  
        rightp_y += -2
        
def auto_object_movements():
    global powerup1_x, powerup1_dx, powerup1_y, powerup1_dy, powerup2_x, powerup2_dx, powerup2_y, powerup2_dy, ball_x, ball_dx, ball_y, ball_dy
    #moving powerups
    powerup1_x += powerup1_dx
    powerup1_y += powerup1_dy
    powerup2_x += powerup2_dx
    powerup2_y += powerup2_dy

    #moving ball    
    ball_x = ball_x + ball_dx
    ball_y = ball_y + ball_dy
    
def auto_object_area_boundaries():
    global powerup1_x, powerup1_dx, powerup1_y, powerup1_dy, powerup2_x, powerup2_dx, powerup2_y, powerup2_dy, ball_y, ball_dy
        #bounce off bottom/top screen
    if ball_y < 0 or ball_y > 580:
        ball_dy = ball_dy * -1
        
        #bounce off bottom/top screen
    if powerup1_y >= 560 or powerup1_y <= 0:
        powerup1_dy = powerup1_dy * -1
    if powerup2_y >= 560 or powerup2_y <= 0:
        powerup2_dy = powerup2_dy * -1
        
        #bounce in yellow rectangle
    if powerup1_x >= 560 or powerup1_x <= 200:
        powerup1_dx = powerup1_dx * -1
    if powerup2_x >= 560 or powerup2_x <= 200:
        powerup2_dx = powerup2_dx * -1

def score_counter():
    global ball_x, left_score, right_score
        #scoring
        #going off left or right edge of screen
        #check right edge/left point
    if ball_x > 780:
        left_score += 1
        ball_reset()
            
        #check left edge/right point
    elif ball_x < 0:
        right_score += 1
        ball_reset()
        
def paddle_ball_bounce():
    global ball_x, ball_dx,  ball_y, left_y, leftp_y, right_y, rightp_y, powerup2left_height, powerup2right_height
        #left paddle bounce    
    if ball_x <= 40 and ball_y > left_y and ball_y < (left_y + powerup2left_height):
        ball_dx = ball_dx * -1
        # left powerup1 paddle bounce
    elif ball_x <= 40 and ball_y > leftp_y and ball_y < (leftp_y + powerup2left_height):
        ball_dx = ball_dx * -1
        #right paddle bounce
    if ball_x >= 750 and ball_y > right_y and ball_y < (right_y + powerup2right_height):
        ball_dx = ball_dx * -1
        #right powerup1 paddle bounce
    elif ball_x >= 750 and ball_y > rightp_y and ball_y < (rightp_y + powerup2right_height):
         ball_dx = ball_dx * -1
         
def powerup_ball_collisions():
    global powerup1_x, ball_x, powerup1_y, ball_y, ball_dx, leftp_x, rightp_x, counter1, last_hit1, powerup2_x, powerup2_y, powerup2left_height, powerup2right_height, left_y, right_y, last_hit2, counter2, leftp_y, rightp_y
    #collision powerup1 and ball
    if abs(powerup1_x - ball_x) <= 30 and abs(powerup1_y - ball_y) <= 30:
        if ball_dx > 0:
            leftp_x = 30
        elif ball_dx < 0:
            rightp_x = 770
        counter1 = 1
        powerup1_x = 1000
        last_hit1 = millis()
        
    #collision powerup2
    if abs(powerup2_x - ball_x) <= 30 and abs(powerup2_y - ball_y) <= 30:
        if ball_dx > 0:
            powerup2left_height = 160
            left_y -= 40
            leftp_y -= 40
        elif ball_dx < 0:
            powerup2right_height = 160
            right_y -= 40
            rightp_y -= 40
        counter2 = 1
        powerup2_x = 1000
        last_hit2 = millis()

def powerup_resets():
    global last_hit1, counter1, last_hit2, counter2
    #reset powerup1        
    if 8000 < millis() - last_hit1 < 9000 and counter1 == 1:
        last_hit1 = 0
        powerup1_reset()



    #reset powerup2        
    if 8000 < millis() - last_hit2 < 9000 and counter2 == 1:
        last_hit2 = 0
        powerup2_reset()
        
def draw_screen():
    text("PONG", 350,40)
    text(left_score, 40, 40)
    text(right_score, 760,40)
    
        
    #powerup area
    fill(255,215,0)
    rect(200, 0, 400, 600)
    
        #Powerups
    fill(255, 0,  0)
    powerup1 = rect(powerup1_x, powerup1_y,40,40)
    fill(0, 0, 255)
    powerup2 = rect(powerup2_x, powerup2_y,40,40)
        
        #paddles
    fill(255, 255, 255)
    rect(30,left_y,10,powerup2left_height) #left paddle
    fill(255, 255, 255)
    rect(770,right_y,10,powerup2right_height) #right paddle
    
    #powerup1_paddle
    fill(0, 128, 0)
    rect(leftp_x,leftp_y,10,powerup2left_height) #left paddle
    fill(0, 128, 0)
    rect(rightp_x,rightp_y,10,powerup2right_height) #right paddle
    

        #ball
    fill(255, 255, 255)
    rect(ball_x,ball_y,20,20)

def setup():
    size(800,600)
    
    
def draw():
    global counter1, counter2, powerup2left_height, powerup2right_height, last_hit1, last_hit2, leftp_y, rightp_y, leftp_x, rightp_x, powerup1_dx, powerup1_dy, powerup2_dx, powerup2_dy, powerup1_x, powerup1_y, powerup2_x, powerup2_y, ball_x, ball_y, ball_dy, ball_dx, left_score, right_score, left_y, right_y 
    
    background(0)
    
        ##############
        #update 
    #holding down key resulting in smoother movement
    continous_movement_paddles()
    
    #powerup1, powerup2 and ball movement
    auto_object_movements()
    
    #powerup1, powerup2 and ball boundaries in game
    auto_object_area_boundaries()

    #score counter
    score_counter()
        
    #regular and powerup paddle bounce with ball    
    paddle_ball_bounce()
    
    #powerup and ball collisions
    powerup_ball_collisions()

    #powerup resets
    powerup_resets()

    
        
        ##############
        #DRAW SCREEN
    draw_screen()


def interactive_paddle_movements():
    global left_y, right_y, leftp_y, rightp_y, leftq_top_y, leftq_bottom_y, rightq_top_y, rightq_bottom_y
            
    #left player w - up/s - down
    if key == "w":
        left_y = left_y - 10
        leftp_y = leftp_y + 10
            
    if key == "s":
        left_y = left_y + 10
        leftp_y = leftp_y - 10

    #right player i - up/k - down
    if key == "i":
        right_y = right_y - 10
        rightp_y = rightp_y + 10

    if key == "k":
        right_y = right_y + 10
        rightp_y = rightp_y - 10

def keyPressed():
    #paddle movement
    interactive_paddle_movements()

def interactive_paddle_smoothing():
    global left_key, right_key
    if key == "w":
        left_key = ""
            
    if key == "s":
        left_key = ""
        
    if key == "i":
        right_key = ""
            
    if key == "k":
        right_key = ""

def keyReleased():
    #helps smoothen paddle movement
    interactive_paddle_smoothing()
